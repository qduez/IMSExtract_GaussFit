# -*- coding: utf-8 -*-
"""
Created on Tue Nov 05 08:28:01 2019

@author: hoyas
#Licensed under GNU General Public License v3.0; See license file.
"""

# Require Python 3.7.5
# Module installation (Linux, using pyenv):
# $ pyenv virtualenv 3.7.5 GaussFit_3.7.5
# $ pyenv local GaussFit_3.7.5
# $ pip pandas ; pip lmfit ; pip matplotlib
# Module installation (Linux):
# sudo apt-get install python-pip ; pip install pandas ; pip install matplotlib ; pip install lmfit

# This program aims at fitting SINGLE gaussian curves for arrival time distribution (mainly for calibrants, but works for anything).
# Input files (.csv) must be generated using Quentin's script with TWIMExtract. (/ ! \ watch out for version compatibility / ! \)
# It will concatenate all files and perform the fit.
# You should check that the fit is well-perfomed by plotting it in Gnuplot.
# gnuplot > plot 'filename.fit' using 1:2, 'filename.fit' using 3:4 with lines
# Refs : https://lmfit.github.io/lmfit-py/model.html & https://stackoverflow.com/questions/45048082/reading-two-columns-of-numbers-from-a-text-file-in-python

#Usage : python GaussFit_0.3g_3.7.5.py > Output.log

import matplotlib.pyplot as plt
import pandas as pd
from numpy import exp, loadtxt, pi, sqrt, log, column_stack, savetxt, var, row_stack
from lmfit.models import GaussianModel
import os
import sys
import shutil
import csv
import re
import sys
from pathlib import Path

pwd = os.getcwd()
os.chdir("./Output")
cwd = os.getcwd()

# Remove temp files
for f in os.listdir(cwd):
    if f.endswith((".tmp")):
         try: 
            os.remove(f)
         except OSError:
            pass

try:
	os.remove("output.out")
except OSError:
    pass

#print("Starting GaussFit...")

# This will: 1) add headers to columns in csv files with corresponding name and 2) concatenate the files generated by Quentin's TWIMextract script
# 1)
for f in os.listdir(cwd):
    if f.endswith((".out")):
         string_name = []
         tmp_var = re.search('ATD_(.+?).txt', f)
         string_name = tmp_var.group(1)
         # print(string_name)
         outfile = string_name + ".tmp"
         with open(f) as f1:
             reader = csv.reader(f1, delimiter = "\t")
 #            print(reader)
             line_count = 0
             with open(outfile, "w") as f2:
                 f2.write(string_name + "\tI\n")
                 writer = csv.writer(f2, delimiter = " ",lineterminator="\n")
                 for row in reader:
                     writer.writerow(row)
# 2)
tmp_list = list()
for f in os.listdir(cwd):
    if f.endswith((".tmp")):
        tmp_list.append(f)
columns=[]

for filename in tmp_list:
	lines = []
	for line in open(filename):
		lines.append(line.strip('\n'))
	columns.append(lines)
rows = zip(*columns)

with open('output.out', 'w') as writer:
	for row in rows:
		writer.write('\t'.join(row))
		writer.write('\n')

# Clean tmp files
test = os.listdir(cwd)
for item in test:
    if item.endswith(".tmp"):
        os.remove( os.path.join( cwd, item ) )

array = []
max_gauss = []
rcarre_all = []
filename = 'output.out'

# Read file containing every ATDs and get the number of columns. Everything must be tab separated!
# Read the first line (containing column headers) to print the results later 
with open(filename, 'rb') as f:
    line = next(f) # read 1 line
    # Specificity of Python >= 3.6 ! Need to decode to convert str type to bytes type
    line = line.decode('utf8')
    column_header = line.split()
    n = len(line.split('\t'))

# Extract even numbers from the range of column to loop over column pairs and fit the n/2 ATDs
for i in range(n):
    if i % 2 == 0:
        array.append(i)

# PEG, PLA and PolyALA masses
C=12.0000
H=1.0078
O=15.9949
Na=22.9898
N=14.0031

PEG=(2*C+4*H+O)
PLA=(6*C+8*H+4*O)
PolyALA=(3*C+5*H+O+N)

# Loop over column pairs to extract gaussian parameters.
# Files *.fit contain x,y values for raw and fitted curves. 

print("Name\tMass\tCharge\tm/z\tMaxGauss\tFWHM\tRcarre") 
for i in array:
    j=i+1
    x, y = loadtxt(filename, unpack = True, usecols=(i,j),  skiprows = 1)
    mod = GaussianModel()
    pars = mod.guess(y, x=x)
    result = mod.fit(y, pars, x=x)
    ion_name = column_header[i]+".fit"
    if "PEG" in ion_name:
        list_of_nums = re.findall('\d+', ion_name)
        charge = int(list_of_nums[0])
        dp = int(list_of_nums[1])
        pegmass = float(PEG*dp + O + (2*H) + charge*Na)
        pegmz = float((PEG*dp + O + (2*H) + charge*Na)/charge)
        sigma = float('%07.6f' % (result.params['sigma'].value))
        maxgauss = float('%7.6f' % (result.params['center'].value))
        fwhm = float('%7.6f' % (result.params['fwhm'].value))
        if var(y) != 0 and result.redchi > 1:
            rcarre = float('%07.6f' % (1 - result.redchi / var(y)))
            if rcarre > 0.95:
#                print("Name:\t%-12s\tMass:\t%06.5f\tCharge:\t%1i\tm/z:\t%06.5f\tMaxGauss:\t%06.5f\tFWHM:\t%06.5f\tRcarre:\t%06.5f" % (column_header[i],pegmass,charge,pegmz,maxgauss,fwhm,rcarre))
                print("%-12s\t%06.5f\t%1i\t%06.5f\t%06.5f\t%06.5f\t%06.5f" % (column_header[i],pegmass,charge,pegmz,maxgauss,fwhm,rcarre))
                all = column_stack((x,y,x,result.best_fit))
                savetxt(ion_name,all,delimiter=" ")
            else:
                print("%-12s" % (column_header[i]))
#                all = column_stack((x,y,x,result.best_fit))
#                savetxt(ion_name,all,delimiter=" ")
    elif "PLA" in ion_name:
        list_of_nums = re.findall('\d+', ion_name)
        #print(list_of_nums)
        charge = int(list_of_nums[0])
        dp = int(list_of_nums[1])
        plamass = float(PLA*dp + C + O + (4*H) + charge*Na)
        #print(plamass)
        plamz = float((PLA*dp + C + O + (4*H) + charge*Na)/charge)
        #print(plamz)
        sigma = float('%07.6f' % (result.params['sigma'].value))
        maxgauss = float('%7.6f' % (result.params['center'].value))
        fwhm = float('%7.6f' % (result.params['fwhm'].value))
        if var(y) != 0 and result.redchi > 1:
            rcarre = float('%07.6f' % (1 - result.redchi / var(y)))
            if rcarre > 0.95:
                print("%-12s\t%06.5f\t%1i\t%06.5f\t%06.5f\t%06.5f\t%06.5f" % (column_header[i],plamass,charge,plamz,maxgauss,fwhm,rcarre))
                all = column_stack((x,y,x,result.best_fit))
                savetxt(ion_name,all,delimiter=" ")
            else:
                print("%-12s" % (column_header[i]))
    elif "PolyALA" in ion_name:
        list_of_nums = re.findall('\d+', ion_name)
        #print(list_of_nums)
        charge = int(list_of_nums[0])
        dp = int(list_of_nums[1])
        polyalamass = float(PolyALA*dp + O + (2*H) + charge*H)
        #print(plamass)
        polyalamz = float((PolyALA*dp + O + (2*H) + charge*H)/charge)
        #print(plamz)
        sigma = float('%07.6f' % (result.params['sigma'].value))
        maxgauss = float('%7.6f' % (result.params['center'].value))
        fwhm = float('%7.6f' % (result.params['fwhm'].value))
        rcarre = float('%07.6f' % (1 - result.redchi / var(y)))
        if var(y) != 0 and result.redchi > 1:
            rcarre = float('%07.6f' % (1 - result.redchi / var(y)))
            if rcarre > 0.95:
                print("%-12s\t%06.5f\t%1i\t%06.5f\t%06.5f\t%06.5f\t%06.5f" % (column_header[i],polyalamass,charge,polyalamz,maxgauss,fwhm,rcarre))
                all = column_stack((x,y,x,result.best_fit))
                savetxt(ion_name,all,delimiter=" ")
            else:
                print("%-12s" % (column_header[i]))
# RÂ² refs: https://stackoverflow.com/questions/22581887/python-lmfit-how-to-calculate-r-squared/22589533#22589533 ; https://www.geeksforgeeks.org/numpy-var-in-python/
    
    continue


# Create a new directory and move .fit files to make it clearer.
out_dir = cwd + "/Fit" 

try:
    os.mkdir(out_dir)
except OSError:
    print ("Creation of the directory %s failed" % out_dir)
else:
    print ("Successfully created the directory %s " % out_dir)

sourcefiles = os.listdir(cwd)

for file in sourcefiles:
    if file.endswith('.fit'):
        shutil.move(os.path.join(cwd,file), os.path.join(out_dir,file))
        
#print("Over!")
